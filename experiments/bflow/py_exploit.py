#!/bin/python3
"""
Run the python variant of an exploit(passing in some memory addys
to see if we can exploit something fun)

"""

import sys;
import os;
import io;
import platform; #platform.architecture('bits','executable') this machine was ('64bit','ELF') windows returned: '64bit','WindowsPE'

# using my kwargs tool might make this nicer.
# but first, let's try passing some opcodes.

opcodes= {
  "intel_skip":'\x09',
  "":''
}

def toggle_endianess(byte_list):
    """
    flip between little_endian and big_endian
    since certain machines have one or the other.
    """
    b = []
    while len(byte_list)>0:
        b.append(byte_list[-1]);
        # that should be all of the thing... what is english.
    return b;

# capture processor type (platform?)
# capture endianness? maybe just assume by processor?
def generate_payload(data):
    """
    attempt to guess where the memory will deposit
    information
    """
    pass;
    ret_code_len = 8; # this is measured in bytes.
    pos = len(data);
    ret_code_pos = pos+1; # I'll need to set up some of these up in a little bit, hone it down to the right spot.
    ret_code_max = pos+ret_code_len; # using an 8 byte address? (64 bits?)
    
